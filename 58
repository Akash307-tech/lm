58.import sklearn.datasets import numpy as np ;; cancer=sklearn.datasets.load_breast_cancer() ;; x=cancer.data y=cancer.target print(x.shape,y.shape) ;;  import pandas as pd ; data=pd.DataFrame(cancer.data,columns=cancer.feature_names) ;; data['class']=cancer.target ;  data.head() ;; print(data['class'].value_counts()) ;; print(cancer.target_names) ;;  data.groupby('class').mean() ;; 
 from sklearn.model_selection import train_test_split ; x=data.drop('class',axis=1) ;y=data['class'] ;;  type(x) ;; x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1) ; x_train=x_train.values ;x_test=x_test.values ;;  
from sklearn.metrics import accuracy_score ; class Perceptron:
      def __init__(self):
           self.w=None;    self.b=None
   def model(self,X):
          return 1 if(np.dot(self.w,X) >= self.b) else 0
   def predict(self,X):  Y=[]
          for x in X:
                result=self.model(x)
                Y.append(result)
         return np.array(Y)
  def fit(self,X,Y,epochs=1,lr=1):
         self.w=np.ones(X.shape[1]); self.b=0; accuracy={}; max_accuracy=0
         wt_matrix=[]
        for i in range(epochs): for x,y in zip(X,Y):; y_pred=self.model(x);  if y==1 and y_pred==0: ;self.w=self.w+lr*x;  self.b=self.b-lr*1; elif y==0 and y_pred==1: self.w=self.w-lr*x ; self.b=self.b+lr*1; wt_matrix.append(self.w) ; accuracy[i]=accuracy_score(self.predict(X),Y); 
if (accuracy[i] >=max_accuracy):
max_accuracy=accuracy[i]; chkptw=self.w; chkptb=self.b ;
self.w=chkptw self.b=chkptb print(max_accuracy) ;
import matplotlib.pyplot as plt plt.plot(accuracy.values()) plt.ylim([0,1]) plt.show() return np.array(wt_matrix);; percept=Perceptron() ;;  wt_matrix=percept.fit(x_train,y_train,10000,0.5) ;; y_predict=percept.predict(x_test);;
from sklearn.metrics import classification_report; print(classification_report(y_test,y_predict)) ;; from sklearn.metrics import accuracy_score;; accuracy = accuracy_score(y_test, y_predict);
print("Accuracy:", accuracy) ;; from sklearn.metrics import confusion_matrix; conf=confusion_matrix(y_test, y_predict); print("Confusion_Matrix : "); print(conf)



